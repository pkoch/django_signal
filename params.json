{"name":"Django signal","body":"# Django Signal\r\n\r\nBecause I really wanted something similar to Django's Signal in Ruby.\r\n\r\nThe Observable module was almost, but not entirely, not over engineered.\r\n\r\n * It made me have an object as the observer, not just a generic callable.\r\n * It's not a self standing class. It has to be included by someone.\r\n * Solution is not obvious if an object has various observable concerns.\r\n * <code>add_observer</code> had everything to cause me reload problems.\r\n\r\n## But, will this work as I expect?\r\n\r\nFirst of all, I obviously didn't wire this signals to ActiveRecord.\r\n\r\nAlso, I took the liberty to make some adaptations. Namely:\r\n\r\n * No explicit weakref stuff. Want a weakref? Build if yourself.\r\n   Invalid refs are handled gracefuly. Check the tests.\r\n * No providing_args, since they had no functional relevance.\r\n\r\n## Installation\r\n\r\nJust add it to your projects' `Gemfile`:\r\n\r\n```ruby\r\ngem \"django_signal\"\r\n```\r\n\r\n## Usage\r\n\r\nhttps://docs.djangoproject.com/en/dev/topics/signals/#defining-and-sending-signals\r\n\r\n## Credits\r\n\r\n * https://code.djangoproject.com/svn/django/trunk/django/dispatch/dispatcher.py\r\n * Gonçalo Silva (@goncalossilva) for teaching me how to cut gems.\r\n\r\n---------------------------------------\r\n\r\nCopyright © 2012 Paulo Köch, released under the MIT license\r\n","tagline":"A port of Django's Signal to ruby.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}